(()=>{var __webpack_modules__={806:module=>{module.exports=eval("require")("@actions/core")},946:module=>{module.exports=eval("require")("@actions/github")},459:module=>{module.exports=eval("require")("@actions/github/lib/utils")},705:module=>{module.exports=eval("require")("@octokit/plugin-retry")},883:module=>{module.exports=eval("require")("@octokit/plugin-throttling")},187:module=>{module.exports=eval("require")("array-sort")},866:module=>{module.exports=eval("require")("csv-stringify/lib/sync")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var r=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](r,r.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return r.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(806);const t=__nccwpck_require__(946);const r=__nccwpck_require__(866);const o=__nccwpck_require__(187);const{GitHub:n}=__nccwpck_require__(459);const{retry:a}=__nccwpck_require__(705);const{throttling:s}=__nccwpck_require__(883);const i=n.plugin(s,a);const _=e.getInput("token",{required:true});const u=e.getInput("org",{required:false});const c=(new Date).toISOString().substring(0,19)+"Z";const p=new i({auth:_,request:{retries:3,retryAfter:180},throttle:{onRateLimit:(e,t,r)=>{r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`);if(t.request.retryCount===0){r.log.info(`Retrying after ${e} seconds!`);return true}},onAbuseLimit:(e,t,r)=>{r.log.warn(`Abuse detected for request ${t.method} ${t.url}`)}}});async function getDependabotRepos(){try{let e=null;let t=[];const r=`\n      query ($org: String!, $cursor: String) {\n        organization(login: $org) {\n          repositories(first: 10, after: $cursor) {\n            nodes {\n              name\n              object(expression: "main:.github/dependabot.yml") {\n                ... on Blob {\n                  text\n                }\n              }\n            }\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n    `;let o=false;let n=null;do{n=await p.graphql({query:r,org:u,cursor:e});const a=n.organization.repositories.nodes;o=n.organization.repositories.pageInfo.hasNextPage;if(o){e=n.organization.repositories.pageInfo.endCursor}else{e=null}t=t.concat(a)}while(o);return t}catch(e){throw new Error(`Error fetching dependabot repos: ${e.message}`)}}async function createReport(n){try{const a=n.map((e=>({repoName:e.name,hasDependabot:e.object?"Yes":"No"})));const s=o(a,"repoName");s.unshift({repoName:"Repository",hasDependabot:"Dependabot.yml"});const i=r(s,{});const _=`reports/${u}-${c}-dependabot-report.csv`;const l=e.getInput("committer-name",{required:false})||"github-actions";const d=e.getInput("committer-email",{required:false})||"github-actions@github.com";const{owner:m,repo:g}=t.context.repo;const b={owner:m,repo:g,path:_,message:`${(new Date).toISOString().slice(0,10)} Dependabot Report`,content:Buffer.from(i).toString("base64"),committer:{name:l,email:d}};await p.rest.repos.createOrUpdateFileContents(b)}catch(e){throw new Error(`Error creating report: ${e.message}`)}}(async()=>{try{const e=await getDependabotRepos();await createReport(e)}catch(t){e.setFailed(t.message)}})()})();module.exports=__webpack_exports__})();