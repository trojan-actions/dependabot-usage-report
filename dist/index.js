(()=>{var __webpack_modules__={705:module=>{module.exports=eval("require")("@actions/core")},466:module=>{module.exports=eval("require")("@actions/github/lib/utils")},640:module=>{module.exports=eval("require")("@octokit/plugin-retry")},417:module=>{module.exports=eval("require")("@octokit/plugin-throttling")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var r=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](r,r.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return r.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(705);const{GitHub:t}=__nccwpck_require__(466);const{retry:r}=__nccwpck_require__(640);const{throttling:o}=__nccwpck_require__(417);const n=t.plugin(o,r);const a=require(process.env.GITHUB_EVENT_PATH);const s=e.getInput("token",{required:true});const i=e.getInput("org",{required:false})||a.organization.login;const _=e.getInput("repo-name",{required:true})||a.repository.name;const u=new n({auth:s,request:{retries:3,retryAfter:180},throttle:{onRateLimit:(e,t,r)=>{r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`);if(t.request.retryCount===0){r.log.info(`Retrying after ${e} seconds!`);return true}},onAbuseLimit:(e,t,r)=>{r.log.warn(`Abuse detected for request ${t.method} ${t.url}`)}}});async function getTemplateRepos(){try{let e=null;let t=[];const r=`\n      query ($owner: String!, $cursorID: String) {\n        organization(login: $owner) {\n          repositories(first: 100, after: $cursorID) {\n            nodes {\n              name\n              templateRepository {\n                nameWithOwner\n              }\n            }\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n          }\n        }\n      }\n    `;let o=false;let n=null;do{n=await u.graphql({query:r,owner:i,cursorID:e});const a=n.organization.repositories.nodes;o=n.organization.repositories.pageInfo.hasNextPage;if(o){e=n.organization.repositories.pageInfo.endCursor}else{e=null}t=t.concat(a)}while(o);const a=t.filter((e=>e.templateRepository!==null));const s=a.filter((e=>e.templateRepository.nameWithOwner===_));const c=s.map((e=>e.name));return c}catch(t){e.setFailed(t.message)}}async function addRepoNames(t){try{const e=a.repository.name;const r=a.repository.owner.login;const o="repos/"+r+"/"+e+"/contents/repoNames.json";const n="Adding repo names to the JSON file";const s=Buffer.from(JSON.stringify(t)).toString("base64");const i=a.repository.default_branch;const _=a.repository.head_commit.id;await u.repos.createOrUpdateFileContents({owner:r,repo:e,path:o,message:n,content:s,branch:i,sha:_})}catch(t){e.setFailed(t.message)}}async function run(){try{const e=await getTemplateRepos();await addRepoNames(e)}catch(t){e.setFailed(t.message)}}run()})();module.exports=__webpack_exports__})();